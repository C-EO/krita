From cba2ac8202459f6a0298209fd113258229f7d829 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@amyspark.me>
Date: Wed, 19 May 2021 18:25:54 +0000
Subject: [PATCH 03/10] Add Android support

---
 gmic-qt/CMakeLists.txt                        | 33 +++++++----
 .../src/Host/KritaPlugin/gmicqttoolplugin.cpp | 56 ++++++++++++++++++-
 gmic-qt/src/Utils.cpp                         |  8 ++-
 3 files changed, 84 insertions(+), 13 deletions(-)

diff --git a/gmic-qt/CMakeLists.txt b/gmic-qt/CMakeLists.txt
index 9ef9ee8..428cefe 100644
--- a/gmic-qt/CMakeLists.txt
+++ b/gmic-qt/CMakeLists.txt
@@ -273,17 +273,21 @@ add_definitions(-Dgmic_gui)
 add_definitions(-Dcimg_use_abort)
 add_definitions(-Dcimg_appname=\"gmic\")
 
-if (UNIX AND NOT APPLE)
-    add_definitions(-Dcimg_display=1)
-    add_definitions(-D_IS_LINUX_)
-    add_definitions(-Dcimg_use_vt100)
-    add_definitions(-D_IS_UNIX_)
-    find_package(X11)
-    set(gmic_qt_LIBRARIES
-        ${gmic_qt_LIBRARIES}
-        ${X11_LIBRARIES} # XXX: Search for X11: Wayland is coming!
-    )
-
+if (UNIX)
+    if(ANDROID)
+        add_definitions(-Dcimg_display=0)
+        add_definitions(-D_IS_UNIX_)
+    elseif(NOT APPLE)
+        add_definitions(-Dcimg_display=1)
+        add_definitions(-D_IS_LINUX_)
+        add_definitions(-Dcimg_use_vt100)
+        add_definitions(-D_IS_UNIX_)
+        find_package(X11)
+        set(gmic_qt_LIBRARIES
+            ${gmic_qt_LIBRARIES}
+            ${X11_LIBRARIES} # XXX: Search for X11: Wayland is coming!
+        )
+    endif()
 endif()
 
 if (APPLE)
@@ -652,6 +656,13 @@ elseif (${GMIC_QT_HOST} STREQUAL "krita-plugin")
       ${KIS_IMAGE_INTERFACE_LIBRARY}
       KF5::CoreAddons
       )
+    if (ANDROID)
+      target_link_libraries(
+        krita_gmic_qt
+        PRIVATE
+        log
+      )
+    endif()
     install(TARGETS krita_gmic_qt DESTINATION ${KRITA_PLUGIN_INSTALL_DIR}) # plugin
 
 elseif (${GMIC_QT_HOST} STREQUAL "none")
diff --git a/gmic-qt/src/Host/KritaPlugin/gmicqttoolplugin.cpp b/gmic-qt/src/Host/KritaPlugin/gmicqttoolplugin.cpp
index 60ceece..ddcef22 100644
--- a/gmic-qt/src/Host/KritaPlugin/gmicqttoolplugin.cpp
+++ b/gmic-qt/src/Host/KritaPlugin/gmicqttoolplugin.cpp
@@ -3,7 +3,7 @@
  *  editors, offering hundreds of filters thanks to the underlying G'MIC
  *  image processing framework.
  *
- *  Copyright (C) 2020 L. E. Segovia <amy@amyspark.me>
+ *  Copyright (C) 2020-2021 L. E. Segovia <amy@amyspark.me>
  *
  *  Description: Krita painting suite plugin for G'Mic-Qt.
  *
@@ -29,6 +29,14 @@
 #include <QTranslator>
 #include <list>
 
+#ifdef Q_OS_ANDROID
+#include <android/log.h>
+#include <array>
+#include <iostream>
+#include <thread>
+#include <unistd.h>
+#endif
+
 #include "DialogSettings.h"
 #include "GmicQt.h"
 #include "HeadlessProcessor.h"
@@ -52,6 +60,46 @@ KritaGmicPlugin::KritaGmicPlugin(QObject *parent, const QVariantList &)
 
 int KritaGmicPlugin::launch(std::shared_ptr<KisImageInterface> i, bool headless)
 {
+#ifdef Q_OS_ANDROID
+  /* Since on Android stdout and stderr redirect to null, un-redirect them */
+  /* based on https://stackoverflow.com/a/gmic-qt/31777050 */
+
+  std::array<int, 2> oldFd;
+  std::array<int, 2> newStdout, newStderr;
+
+  auto redir_worker = [](std::array<int, 2> &fd, android_LogPriority lvl) {
+    ssize_t rdsz;
+    std::array<char, 1024> buf{};
+    while ((rdsz = read(fd[0], buf.data(), buf.size() - 1)) > 0) {
+      if (buf[rdsz - 1] == '\n')
+        --rdsz;
+      buf[rdsz] = 0; /* add null-terminator */
+      __android_log_write(
+          lvl, qPrintable(GmicQtHost::ApplicationName), buf.data());
+    }
+  };
+
+  /* make stdout line-buffered and stderr unbuffered */
+  setvbuf(stdout, 0, _IOLBF, 0);
+  setvbuf(stderr, 0, _IOLBF, 0);
+
+  /* create the pipe and redirect stdout and stderr */
+  dup2(1, oldFd[0]);
+  dup2(2, oldFd[1]);
+  pipe(newStdout.data());
+  pipe(newStderr.data());
+  dup2(newStdout[1], 1);
+  dup2(newStderr[1], 2);
+
+  /* spawn the logging thread */
+  auto newStdoutRedir =
+      std::thread(redir_worker, std::ref(newStdout), ANDROID_LOG_DEBUG);
+  auto newStderrRedir =
+      std::thread(redir_worker, std::ref(newStderr), ANDROID_LOG_WARN);
+  newStdoutRedir.detach();
+  newStderrRedir.detach();
+#endif
+
   using namespace GmicQt;
 
   std::list<GmicQt::InputMode> disabledInputModes;
@@ -120,6 +168,12 @@ int KritaGmicPlugin::launch(std::shared_ptr<KisImageInterface> i, bool headless)
   GmicQtHost::sharedMemorySegments.clear();
   GmicQtHost::iface.reset();
 
+#ifdef Q_OS_ANDROID
+  /* un-redirect stdout and stderr */
+  dup2(oldFd[0], 1);
+  dup2(oldFd[1], 2);
+#endif
+
   return status;
 }
 
diff --git a/gmic-qt/src/Utils.cpp b/gmic-qt/src/Utils.cpp
index 8d8a81d..96d77d1 100644
--- a/gmic-qt/src/Utils.cpp
+++ b/gmic-qt/src/Utils.cpp
@@ -28,6 +28,7 @@
 #include <QFileInfo>
 #include <QRegExp>
 #include <QString>
+#include <QStandardPaths>
 #include "Common.h"
 #include "Host/GmicQtHost.h"
 #include "gmic.h"
@@ -45,7 +46,12 @@ namespace GmicQt
 
 const QString & gmicConfigPath(bool create)
 {
-  QString qpath = QString::fromUtf8(gmic::path_rc());
+#ifdef Q_OS_ANDROID
+  QString baseAppPath = QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation);
+  QString qpath = QString::fromLocal8Bit(gmic::path_rc(qPrintable(baseAppPath)));
+#else
+  QString qpath = QString::fromLocal8Bit(gmic::path_rc());
+#endif
   QFileInfo dir(qpath);
   static QString result;
   if (dir.isDir()) {
-- 
2.31.1.windows.1

